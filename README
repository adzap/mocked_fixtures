MockedFixtures
==============

This plugin adds the ability to use fixtures as mocked model objects rather than
load in them into the database. So you can now reuse those thoughtfully crafted 
fixtures but minus the database overhead. This particularly speeds up tests 
where the database is not needed (or wanted) such as in controller and view 
specs.

A mocked fixture is a mocked model object with all the model attributes stubbed
out to return the values from the fixture if defined. If no fixture value was 
defined then a nil is returned for the attribute method.

This can make life much simpler in your controller/view specs or functional 
tests as the it can go from this:

	before do
		@joe = mock_model(People)
		@joe.stub!(:first_name).and_return('Joe')
		@joe.stub!(:last_name).and_return('Blow')
		@joe.stub!(:sex).and_return('Male')
		...
	end
	
To this:

	mock_fixtures :people

	before do
		@joe = mock_people(:joe)
		# Done. Plus you also have any other fixtures waiting in the wings
	end

But I hear you say you can do the first example inline, which is true. But 
still it can be tedious for lesser model attributes. If you have a nice fixture 
you used from your model specs then why not reuse it eh?! Also if you have many 
attributes which you are stubbing just so the controller or view spec doen't 
throw an 'unexpected message error', then this can make short work for you.

Again none of this touches the database as all model attributes are read from
schema.rb file. Nice, huh?!


Install
======

To use it install as a plugin

	piston import URL_TO_COME vendor/plugins/mocked_fixtures
	
Then in your 'test_helper.rb' or 'spec_helper.rb' file:
	
	require 'mocked_fixtures'

This line must be *above* the require 'spec/rails' line in your spec_helper.rb 
file.


Usage
=====

To use it in your tests or specs at the top of the test case or describe
block put:
	
	mock_fixtures :people 

just like you would with the normal fixtures class method.

Then in your test method or example you call:
	
	@joey = mock_people(:joey)

If you have a people fixture labelled 'joey' you will get back the mocked
model object to play with that has all the values from the fixture returned when
the attribute methods are called.

Now remember the mocked objects are just simple mocked models and the 
attributes only have getters not setters. This is the same behaviour as
mock_model(YourModel) using mocha (rspec) or flexmock(:model, YourModel), um 
because thats where they came from. Not from the stalk or the cabbage patch.


Feedback
========

If you have feedback or suggestions Google has kindly donated me this email
address to contact me: 

	adam.meehan@gmail.com